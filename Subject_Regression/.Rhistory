sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
install(rpart)
# Regressor
install.packages(rpart)
install.packages('rpart')
install.packages("rpart")
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = y ~ .,
data = training_set,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = y ~ .,
data = training_set,
control = rpart.control(minsplit = (0.1*dim(dataset)[1])))
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
install.packages("randomForest")
RMSE = function(a, b){
sqrt(mean((a - b)^2))
}
# Import the dataset
dataset = read.csv('polyRegression.csv')
print(colnames(dataset))
dataset <- dataset[,-1]
print(colnames(dataset))
# Splitting the dataset
library(caTools)
split = sample.split(dataset$X, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regressor
# install.packages('rpart')
library(randomForest)
regressor = randomForest(x = dataset[-2],
y = dataset$y,
ntree = 500)
# Predicting
y_pred = predict(regressor, newdata = test_set)
# Visualising
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$X, y = training_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Training set)') +
xlab('X') +
ylab('y')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$X, y = test_set$y),
colour = 'red') +
geom_line(aes(x = training_set$X, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('X vs y (Test set)') +
xlab('X') +
ylab('y')
RMSE(test_set$y, y_pred)
